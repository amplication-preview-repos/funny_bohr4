/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Nutrition as PrismaNutrition } from "@prisma/client";

export class NutritionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.NutritionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.nutrition.count(args);
  }

  async nutritions<T extends Prisma.NutritionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionFindManyArgs>
  ): Promise<PrismaNutrition[]> {
    return this.prisma.nutrition.findMany<Prisma.NutritionFindManyArgs>(args);
  }
  async nutrition<T extends Prisma.NutritionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionFindUniqueArgs>
  ): Promise<PrismaNutrition | null> {
    return this.prisma.nutrition.findUnique(args);
  }
  async createNutrition<T extends Prisma.NutritionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionCreateArgs>
  ): Promise<PrismaNutrition> {
    return this.prisma.nutrition.create<T>(args);
  }
  async updateNutrition<T extends Prisma.NutritionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionUpdateArgs>
  ): Promise<PrismaNutrition> {
    return this.prisma.nutrition.update<T>(args);
  }
  async deleteNutrition<T extends Prisma.NutritionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.NutritionDeleteArgs>
  ): Promise<PrismaNutrition> {
    return this.prisma.nutrition.delete(args);
  }
}
